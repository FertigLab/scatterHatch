for (row in 1:nrow(freqMat)){ # iterates by every row
currentRow = freqMat[row, ]
rowPoints = pointsToGrid[pointsToGrid$yIntervals == row, ]
if (density <= 1 & row+1 <= nrow(freqMat)){  # where to draw y levels if density < 1
yLevels = median(rowPoints$y)
}
if (density <= 1){ # if density < 1, when to skip rows
rowDraw = (as.integer(row * density)*(1/density)) == row
}
if (row + 1 > nrow(freqMat)){ # for top rows exception case
yLevels = yBins[row]
}
prevCol = 0
lineDraw = FALSE # whether line being drawn or not
for (col in 1:ncol(freqMat)){
if (!lineDraw & prevCol == 0 & freqMat[row, col] != 0 & rowDraw){ # starting a line segment
gridPoints = rowPoints[rowPoints$xIntervals == col, ] # points corresponding to current grid square
xStart = c(xStart, min(gridPoints$x) - adjustmentFactorX) # where to draw horizontal lines
yStart = c(yStart, yLevels)
lineDraw = TRUE
}
if (lineDraw & currentRow[col] == 0 & rowDraw){ # ending line segment
gridPoints = rowPoints[rowPoints$xIntervals == col-1, ] # points corresponding to current grid square
xEnd = c(xEnd, max(gridPoints$x) + adjustmentFactorX) # where to draw horizontal lines
yEnd = c(yEnd, yLevels)
lineDraw = FALSE
}
# dealing with sparse points
surroundingGrid = c((col-sparsity):(col-1), (col+1):(col+sparsity))
surroundingGrid = surroundingGrid[surroundingGrid > 0 & surroundingGrid < ncol(freqMat)] # grids sparsity horizontal distance away
if (sum(currentRow[surroundingGrid]) <= 0 & currentRow[col] != 0){
pointsToGrid[pointsToGrid$xIntervals==col & pointsToGrid$yIntervals==row, ]$sparsity <- "sparse"
xStart = c(xStart, min(gridPoints$x) - adjustmentFactorX) # where to draw horizontal lines
yStart = c(yStart, median(gridPoints$y))
xEnd = c(xEnd, max(gridPoints$x) + adjustmentFactorX) # where to draw horizontal lines
yEnd = c(yEnd, median(gridPoints$y))
}
prevCol = currentRow[col]
}
}
return(pointsToGrid)
return(data.frame(xStart=xStart, yStart=yStart, xEnd=xEnd, yEnd=yEnd))
}
s = sparsityTest(panGrid, density=1/2, sparsity=7, size=1, xDiff = xDiff, yDiff = yDiff)
ggplot(data=s, aes(x=x, y=y, color=sparsity)) + geom_point()
View(panGrid)
pdacGrid = countGridPoints(pdacData$Xt, pdacData$Yt, xDiff, yDiff, n=360)
s = sparsityTest(pdacGrid, density=1/2, sparsity=7, size=1, xDiff = xDiff, yDiff = yDiff)
ggplot(data=s, aes(x=x, y=y, color=sparsity)) + geom_point()
library(spatialstat)
library(spatstat)
install.packages("spatstat")
library(spatstat)
panDist = nndist(pan$Xt, pan$Yt)
sparsityDistanceCalc <- function(gridOutput){
xBins = gridOutput[[1]]
yBins = gridOutput[[2]]
freqMat = gridOutput[[3]]
pointsToGrid = gridOutput[[4]]
pointsToGrid$closestPoint = spatstat::nndist(pointsToGrid$x, pointsToGrid$y)
return(pointsToGrid)
}
panGrid = sparsityDistanceCalc(panGrid)
View(panGrid)
ggplot(data=panGrid, aes(x=closestPoint)) + geom_density()
median(panGrid$closestPoint)
panClosestNorm = (panGrid$closestPoint - mean(panGrid$closestPoint))/diff(range(panGrid$closestPoint))
mean(panGrid$closestPoint)
max(panClosestNorm)
hist(panClosestNorm)
summary(panGrid$closestPoint)
boxplot.stats(panGrid$closestPoint)$out
length(boxplot.stats(panGrid$closestPoint)$out)
summary(pointsToGrid$closestPoint)[1]
summary(panGrid$closestPoint)[1]
summary(panGrid$closestPoint)[2]
summary(panGrid$closestPoint)[4]
summary(panGrid$closestPoint)[5]
sparsityDistanceCalc <- function(gridOutput){
xBins = gridOutput[[1]]
yBins = gridOutput[[2]]
freqMat = gridOutput[[3]]
pointsToGrid = gridOutput[[4]]
pointsToGrid$closestPoint = spatstat::nndist(pointsToGrid$x, pointsToGrid$y)
# annotating outliers in sparsity
sparsityStats = summary(pointsToGrid$closestPoint)
pointsToGrid$outliers = pointsToGrid$closestPoint > (1.5*(sparsityStats[5] - sparsityStats[2]) + sparsityStats[5])
return(pointsToGrid)
}
panGrid = sparsityDistanceCalc(panGrid)
c(1,2,3) > 3
View(panGrid)
panGrid$outliers = panGrid$closestPoint > 4
sparsityDistanceCalc <- function(gridOutput){
xBins = gridOutput[[1]]
yBins = gridOutput[[2]]
freqMat = gridOutput[[3]]
pointsToGrid = gridOutput[[4]]
pointsToGrid$closestPoint = spatstat::nndist(pointsToGrid$x, pointsToGrid$y)
# annotating outliers in sparsity
sparsityStats = summary(pointsToGrid$closestPoint)
#pointsToGrid$outliers = pointsToGrid$closestPoint > (1.5*(sparsityStats[5] - sparsityStats[2]) + sparsityStats[5])
return(pointsToGrid)
}
panGrid = sparsityDistanceCalc(panGrid)
rm(sparsityDistanceCalc())
rm(sparsityDistanceCalc)
sparsityDistanceCalc <- function(x, y){
sparsityDF = data.frame(x = x, y = y)
sparsityDF$closestPoint = spatstat::nndist(x, y)
# annotating outliers in sparsity
sparsityStats = summary(sparsityDF$closestPoint)
sparsityDF$outliers = sparsityDF$closestPoint > (1.5*(sparsityStats[5] - sparsityStats[2]) + sparsityStats[5])
return(sparsityDF)
}
sparsityDF = sparsityDF(pan$Xt, pan$Yt)
sparsityDF = sparsityDistanceCa;c(pan$Xt, pan$Yt)
sparsityDF = sparsityDistanceCalc(pan$Xt, pan$Yt)
View(s)
View(sparsityDF)
table(sparsityDF$outliers)
ggplot(data = sparsityDF, aes(x=x, y=y, color=outliers)) + geom_point()
ggplot(data = sparsityDF, aes(x=x, y=y, color=outliers)) + geom_point() + lims(x=xDiff, y=yDiff)
dev.new(8, 11)
ggplot(data = sparsityDF, aes(x=x, y=y, color=outliers)) + geom_point() + lims(x=xDiff, y=yDiff)
dev.close()
dev.new(11, 8)
ggplot(data = sparsityDF, aes(x=x, y=y, color=outliers)) + geom_point() + lims(x=xDiff, y=yDiff)
other = pdacGrid[pdacGrid$location == 'Other',]
other = pdacData[pdacData$location == 'Other',]
sparsityDF = sparsityDF(other$Xt, other$Yt)
sparsityDF = sparsityDistanceCalc(other$Xt, other$Yt)
ggplot(data = sparsityDF, aes(x=x, y=y, color=outliers)) + geom_point() + lims(x=xDiff, y=yDiff)
sparsityDF$secondClosestPoint = spatstat::nndist(sparsityDF$x, sparsityDF$y, k=2)
View(sparsityDF)
sparsityDistanceCalc <- function(x, y){
sparsityDF = data.frame(x = x, y = y)
#sparsityDF$closestPoint = spatstat::nndist(x, y, k = 1)
#sparsityDF$secondClosestPoint = spatstat::nndist(x, y, k = 2)
closestKPoints = spatstat::nndist(x, y, k = 1) + spatstat::nndist(x, y, k = 2)
# annotating outliers in sparsity
sparsityStats = summary(sparsityDF$closestPoint)
sparsityDF$outliers = sparsityDF$closestPoint > (1.5*(sparsityStats[5] - sparsityStats[2]) + sparsityStats[5])
return(sparsityDF)
}
sparsityDF = sparsityDistanceCalc(pan$Xt, pan$Yt)
sparsityDistanceCalc <- function(x, y){
sparsityDF = data.frame(x = x, y = y)
#sparsityDF$closestPoint = spatstat::nndist(x, y, k = 1)
#sparsityDF$secondClosestPoint = spatstat::nndist(x, y, k = 2)
sparsityDF$closestKPoints = spatstat::nndist(x, y, k = 1) + spatstat::nndist(x, y, k = 2)
# annotating outliers in sparsity
sparsityStats = summary(sparsityDF$closestKPoints)
sparsityDF$outliers = sparsityDF$closestKPoints > (1.5*(sparsityStats[5] - sparsityStats[2]) + sparsityStats[5])
return(sparsityDF)
}
sparsityDF = sparsityDistanceCalc(pan$Xt, pan$Yt)
ggplot(data = sparsityDF, aes(x=x, y=y, color=outliers)) + geom_point()
k = spatstat::nndist(pan$Xt, pan$Yt, k = c(1,2,3))
View(k)
p = sum(k)
rm(p)
p = apply(k, 1, sum)
sparsityDistanceCalc <- function(x, y){
sparsityDF = data.frame(x = x, y = y)
#sparsityDF$closestPoint = spatstat::nndist(x, y, k = 1)
#sparsityDF$secondClosestPoint = spatstat::nndist(x, y, k = 2)
sparsityDF$closestKPoints = apply(spatstat::nndist(x, y, k = c(1:5)), 1, sum)
# annotating outliers in sparsity
sparsityStats = summary(sparsityDF$closestKPoints)
sparsityDF$outliers = sparsityDF$closestKPoints > (1.5*(sparsityStats[5] - sparsityStats[2]) + sparsityStats[5])
return(sparsityDF)
}
ggplot(data = sparsityDF, aes(x=x, y=y, color=outliers)) + geom_point()
sparsityDF = sparsityDistanceCalc(pan$Xt, pan$Yt)
ggplot(data = sparsityDF, aes(x=x, y=y, color=outliers)) + geom_point()
ggplot(data = sparsityDF, aes(x=x, y=y, color=outliers)) + geom_point(size=0.1)
library(scatterHatch)
pdacData = scatterHatch::pdacData
pdacData$cellID = paste0('cell_', 1:nrow(pdacData))
pdacData$Yt <- -pdacData$Yt
pancreas_frames = c(1:6, 27:31, 15:19, 40:44)
PDAC_frames = c(23:26, 35:37, 51:52, 64:65, 77)
small_intestines_frames = c(49:50, 63, 75:76, 88:89, 100:103, 112:116, 125:129, 137:140)
annotateLocation <- function(frame){
if (frame %in% pancreas_frames){return("Pancreas")}
if (frame %in% PDAC_frames){return("PDAC")}
if (frame %in% small_intestines_frames){return("Small Intestine")}
return("Other")
}
pdacData$location = sapply(pdacData$frame, annotateLocation)
myTheme <- theme_classic() + theme(plot.title = element_text(family = "serif", face = "bold",
size = 25), axis.title.x = element_text(family = "serif", size = 20), axis.text.x = element_text(family = "serif",
color = "black", size = 15), axis.title.y = element_text(family = "serif", size = 20),
axis.text.y = element_text(family = "serif", color = "black", size = 15)) + theme(legend.title = element_text(family = "serif",
size = 20, face = "bold"), legend.text = element_text(family = "serif", size = 15))
library(ggplot2)
myTheme <- theme_classic() + theme(plot.title = element_text(family = "serif", face = "bold",
size = 25), axis.title.x = element_text(family = "serif", size = 20), axis.text.x = element_text(family = "serif",
color = "black", size = 15), axis.title.y = element_text(family = "serif", size = 20),
axis.text.y = element_text(family = "serif", color = "black", size = 15)) + theme(legend.title = element_text(family = "serif",
size = 20, face = "bold"), legend.text = element_text(family = "serif", size = 15))
patternList = list(list(pattern = "horizontal"), list(pattern = "horizontal"),
list(pattern = "horizonta"), list(pattern = "horizonta"))
dev.new(height = 8, width = 11, noRStudioGD = TRUE)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
plot(plt)
library(scatterHatch)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
dev.new(height = 8, width = 11, noRStudioGD = TRUE)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
plot(plt)
library(grid)
plot(plt)
grid::grobTree(
grid::circleGrob(0.5, 0.5, 0.5, gp=grid::gpar(col=color, fill=color, lwd=1, alpha=1)),
grid::linesGrob(x=c(0,1), y=c(0.5, 0.5), gp=linePar),
grid::linesGrob(x=c(-sqrt((0.5^2)-(0.25^2)) + 0.5, sqrt((0.5^2)-(0.25^2)) +0.5), y=c(0.25, 0.25), gp=linePar),
grid::linesGrob(x=c(-sqrt((0.5^2)-(0.25^2)) + 0.5, sqrt((0.5^2)-(0.25^2)) +0.5), y=c(0.75, 0.75), gp=linePar),
gp=grid::gpar(alpha=1)))
grid::grobTree(
grid::circleGrob(0.5, 0.5, 0.5, gp=grid::gpar(col=color, fill=color, lwd=1, alpha=1)),
grid::linesGrob(x=c(0,1), y=c(0.5, 0.5), gp=linePar),
grid::linesGrob(x=c(-sqrt((0.5^2)-(0.25^2)) + 0.5, sqrt((0.5^2)-(0.25^2)) +0.5), y=c(0.25, 0.25), gp=linePar),
grid::linesGrob(x=c(-sqrt((0.5^2)-(0.25^2)) + 0.5, sqrt((0.5^2)-(0.25^2)) +0.5), y=c(0.75, 0.75), gp=linePar),
gp=grid::gpar(alpha=1))
grid::grobTree(
grid::circleGrob(0.5, 0.5, 0.5, gp=grid::gpar(col="black", fill="black", lwd=1, alpha=1)),
grid::linesGrob(x=c(0,1), y=c(0.5, 0.5), gp=linePar),
grid::linesGrob(x=c(-sqrt((0.5^2)-(0.25^2)) + 0.5, sqrt((0.5^2)-(0.25^2)) +0.5), y=c(0.25, 0.25), gp=linePar),
grid::linesGrob(x=c(-sqrt((0.5^2)-(0.25^2)) + 0.5, sqrt((0.5^2)-(0.25^2)) +0.5), y=c(0.75, 0.75), gp=linePar),
gp=grid::gpar(alpha=1))
linePar = grid::gpar(col = lineColor, fill = color, lwd = 2*lineWidth, lty = lineType, alpha=1)
linePar = grid::gpar(col = "black", fill = "black", lwd = 2, lty = "dashed", alpha=1)
grid::grobTree(
grid::circleGrob(0.5, 0.5, 0.5, gp=grid::gpar(col="black", fill="black", lwd=1, alpha=1)),
grid::linesGrob(x=c(0,1), y=c(0.5, 0.5), gp=linePar),
grid::linesGrob(x=c(-sqrt((0.5^2)-(0.25^2)) + 0.5, sqrt((0.5^2)-(0.25^2)) +0.5), y=c(0.25, 0.25), gp=linePar),
grid::linesGrob(x=c(-sqrt((0.5^2)-(0.25^2)) + 0.5, sqrt((0.5^2)-(0.25^2)) +0.5), y=c(0.75, 0.75), gp=linePar),
gp=grid::gpar(alpha=1))
plot(grid::grobTree(
grid::circleGrob(0.5, 0.5, 0.5, gp=grid::gpar(col="black", fill="black", lwd=1, alpha=1)),
grid::linesGrob(x=c(0,1), y=c(0.5, 0.5), gp=linePar),
grid::linesGrob(x=c(-sqrt((0.5^2)-(0.25^2)) + 0.5, sqrt((0.5^2)-(0.25^2)) +0.5), y=c(0.25, 0.25), gp=linePar),
grid::linesGrob(x=c(-sqrt((0.5^2)-(0.25^2)) + 0.5, sqrt((0.5^2)-(0.25^2)) +0.5), y=c(0.75, 0.75), gp=linePar),
gp=grid::gpar(alpha=1)))
xDiff = ggplot_build(plt)$layout$panel_params[[1]]$x.range # gets x range
yDiff = ggplot_build(plt)$layout$panel_params[[1]]$y.range # gets y range
pdacGridOutput = scatterHatch::countGridPoints(pdacData$Xt, pdacData$Yt, xDiff, yDiff, n = 288)
library(scatterHatch)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
dev.size()
grid::convertWidth(grid::unit(12, "points"), unitTo="npc", valueOnly = TRUE)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
grid::unit(12, "points")
convertWidth(1, unitTo = "npc", valueOnly = TRUE)
grid::unit(c(12), "points")
p = grid::unit(c(12), "points")
convertWidth(p, unitTo = "npc", valueOnly = TRUE)
grid::convertWidth(grid::unit(12, "points"), unitTo="npc", valueOnly = TRUE)
library(scatterHatch)
pdacData = scatterHatch::pdacData
pdacData$cellID = paste0('cell_', 1:nrow(pdacData))
pdacData$Yt <- -pdacData$Yt
pancreas_frames = c(1:6, 27:31, 15:19, 40:44)
PDAC_frames = c(23:26, 35:37, 51:52, 64:65, 77)
small_intestines_frames = c(49:50, 63, 75:76, 88:89, 100:103, 112:116, 125:129, 137:140)
annotateLocation <- function(frame){
if (frame %in% pancreas_frames){return("Pancreas")}
if (frame %in% PDAC_frames){return("PDAC")}
if (frame %in% small_intestines_frames){return("Small Intestine")}
return("Other")
}
pdacData$location = sapply(pdacData$frame, annotateLocation)
library(ggplot2)
myTheme <- theme_classic() + theme(plot.title = element_text(family = "serif", face = "bold",
size = 25), axis.title.x = element_text(family = "serif", size = 20), axis.text.x = element_text(family = "serif",
color = "black", size = 15), axis.title.y = element_text(family = "serif", size = 20),
axis.text.y = element_text(family = "serif", color = "black", size = 15)) + theme(legend.title = element_text(family = "serif",
size = 20, face = "bold"), legend.text = element_text(family = "serif", size = 15))
patternList = list(list(pattern = "horizontal"), list(pattern = "horizontal"),
list(pattern = "horizontal"), list(pattern = "horizontal"))
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
dev.new(height = 8, width = 11, noRStudioGD = TRUE)
plot(plt)
ggsave("C:\\umd\\clubs\\smallGrid.pdf")
as.integer(diff(yDiff)/(convertSizeToCartesian(1e, yDiff, 'y')))
as.integer(diff(yDiff)/(convertSizeToCartesian(1, yDiff, 'y')))
xDiff = ggplot_build(plt)$layout$panel_params[[1]]$x.range # gets x range
yDiff = ggplot_build(plt)$layout$panel_params[[1]]$y.range # gets y range
as.integer(diff(yDiff)/(convertSizeToCartesian(1, yDiff, 'y')))
as.integer(diff(xDiff)/(convertSizeToCartesian(1, xDiff, 'x')))
convertSizeToCartesian(1, xDiff, 'x')
diff(xDiff)
diff(xDiff)/210
2228*2
228*2
as.integer(diff(xDiff)/(convertSizeToCartesian(0.1, xDiff, 'x')))
as.integer(500*exp(-0.1/2.2)+43.44965)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 0.1, patternList = patternList) + myTheme
plot(plt)
library(scatterHatch)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 0.1, patternList = patternList) + myTheme
library(scatterHatch)
library(ggplot2)
dacData = scatterHatch::pdacData
pdacData$cellID = paste0('cell_', 1:nrow(pdacData))
pdacData$Yt <- -pdacData$Yt
pancreas_frames = c(1:6, 27:31, 15:19, 40:44)
PDAC_frames = c(23:26, 35:37, 51:52, 64:65, 77)
small_intestines_frames = c(49:50, 63, 75:76, 88:89, 100:103, 112:116, 125:129, 137:140)
annotateLocation <- function(frame){
if (frame %in% pancreas_frames){return("Pancreas")}
if (frame %in% PDAC_frames){return("PDAC")}
if (frame %in% small_intestines_frames){return("Small Intestine")}
return("Other")
}
pdacData$location = sapply(pdacData$frame, annotateLocation)
myTheme <- theme_classic() + theme(plot.title = element_text(family = "serif", face = "bold",
size = 25), axis.title.x = element_text(family = "serif", size = 20), axis.text.x = element_text(family = "serif",
color = "black", size = 15), axis.title.y = element_text(family = "serif", size = 20),
axis.text.y = element_text(family = "serif", color = "black", size = 15)) + theme(legend.title = element_text(family = "serif",
size = 20, face = "bold"), legend.text = element_text(family = "serif", size = 15))
patternList = list(list(pattern = "horizontal"), list(pattern = "horizontal"),
list(pattern = "horizontal"), list(pattern = "horizontal"))
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
dev.new(width = 11, height = 8, noRStudioGD = TRUE)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
plot(plt)
pdac = pdacData[pdacData$location == "PDAC", ]
View(pdac)
xDiff = ggplot_build(plt)$layout$panel_params[[1]]$x.range # gets x range
yDiff = ggplot_build(plt)$layout$panel_params[[1]]$y.range # gets y range
pdacGrid = countGridPoints(pdac$Xt, pdac$Yt, xDiff, yDiff, n = 360)
pdacPointsToGrid = pdacGrid[[4]]
View(pdacPointsToGrid)
pdacFreqMat = pdacGrid[[3]]
View(pdacFreqMat)
pdacPointsToGrid = sparsityDistanceCalc(pdacGrid, 1, xDiff, yDiff, 'x')
pdacGrid = countGridPoints(pdac$Xt, pdac$Yt, xDiff, yDiff, n = 360)
pdacPointsToGrid = pdacGrid[[4]]
pdacPointsToGrid = sparsityDistanceCalc(pdacPointsToGrid, 1, xDiff, yDiff, 'x')
View(pdacPointsToGrid)
94%4
(as.integer(93 * 1/4)*(4)) == 93
(as.integer(94 * 1/4)*(4)) == 94
(as.integer(95 * 1/4)*(4)) == 95
(as.integer(96 * 1/4)*(4)) == 96
ggsave("C:\umd\clubs\densityTest.pdf")
ggsave("C:\\umd\\clubs\\densityTest.pdf")
94%4
94%%4
96%%4
96*1/4
24*4
library(scatterHatch)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
library(scatterHatch)
library(ggplot2)
pdacData = scatterHatch::pdacData
pdacData$cellID = paste0('cell_', 1:nrow(pdacData))
pdacData$Yt <- -pdacData$Yt
pancreas_frames = c(1:6, 27:31, 15:19, 40:44)
PDAC_frames = c(23:26, 35:37, 51:52, 64:65, 77)
small_intestines_frames = c(49:50, 63, 75:76, 88:89, 100:103, 112:116, 125:129, 137:140)
annotateLocation <- function(frame){
if (frame %in% pancreas_frames){return("Pancreas")}
if (frame %in% PDAC_frames){return("PDAC")}
if (frame %in% small_intestines_frames){return("Small Intestine")}
return("Other")
}
pdacData$location = sapply(pdacData$frame, annotateLocation)
myTheme <- theme_classic() + theme(plot.title = element_text(family = "serif", face = "bold",
size = 25), axis.title.x = element_text(family = "serif", size = 20), axis.text.x = element_text(family = "serif",
color = "black", size = 15), axis.title.y = element_text(family = "serif", size = 20),
axis.text.y = element_text(family = "serif", color = "black", size = 15)) + theme(legend.title = element_text(family = "serif",
size = 20, face = "bold"), legend.text = element_text(family = "serif", size = 15))
patternList = list(list(pattern = "horizontal"), list(pattern = "horizontal"),
list(pattern = "horizontal"), list(pattern = "horizontal"))
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
pointSize = 1
ifelse(is.null(gridSize), as.integer(500*exp(-pointSize/2.2)+43.44965), gridSize) # grid size follows a exponential decay function in terms of pointSize
as.integer(500*exp(-pointSize/2.2)+43.44965)
library(scatterHatch)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
library(scatterHatch)
library(ggplot2)
pdacData = scatterHatch::pdacData
pdacData$cellID = paste0('cell_', 1:nrow(pdacData))
pdacData$Yt <- -pdacData$Yt
pancreas_frames = c(1:6, 27:31, 15:19, 40:44)
PDAC_frames = c(23:26, 35:37, 51:52, 64:65, 77)
small_intestines_frames = c(49:50, 63, 75:76, 88:89, 100:103, 112:116, 125:129, 137:140)
annotateLocation <- function(frame){
if (frame %in% pancreas_frames){return("Pancreas")}
if (frame %in% PDAC_frames){return("PDAC")}
if (frame %in% small_intestines_frames){return("Small Intestine")}
return("Other")
}
pdacData$location = sapply(pdacData$frame, annotateLocation)
myTheme <- theme_classic() + theme(plot.title = element_text(family = "serif", face = "bold",
size = 25), axis.title.x = element_text(family = "serif", size = 20), axis.text.x = element_text(family = "serif",
color = "black", size = 15), axis.title.y = element_text(family = "serif", size = 20),
axis.text.y = element_text(family = "serif", color = "black", size = 15)) + theme(legend.title = element_text(family = "serif",
size = 20, face = "bold"), legend.text = element_text(family = "serif", size = 15))
patternList = list(list(pattern = "horizontal"), list(pattern = "horizontal"),
list(pattern = "horizontal"), list(pattern = "horizontal"))
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
pdac = pdacData[pdacData$location == "PDAC",]
xDiff = ggplot_build(plt)$layout$panel_params[[1]]$x.range # gets x range
yDiff = ggplot_build(plt)$layout$panel_params[[1]]$y.range # gets y range
pdacGrid = countGridPoints(pdac$Xt, pdac$Yt, xDiff, yDiff, n=360)
pdacGrid[[3]][96, 243]
library(scatterHatch)
library(ggplot2)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
library(scatterHatch)
library(ggplot2)
pdacData = scatterHatch::pdacData
pdacData$cellID = paste0('cell_', 1:nrow(pdacData))
pdacData$Yt <- -pdacData$Yt
pancreas_frames = c(1:6, 27:31, 15:19, 40:44)
PDAC_frames = c(23:26, 35:37, 51:52, 64:65, 77)
small_intestines_frames = c(49:50, 63, 75:76, 88:89, 100:103, 112:116, 125:129, 137:140)
annotateLocation <- function(frame){
if (frame %in% pancreas_frames){return("Pancreas")}
if (frame %in% PDAC_frames){return("PDAC")}
if (frame %in% small_intestines_frames){return("Small Intestine")}
return("Other")
}
pdacData$location = sapply(pdacData$frame, annotateLocation)
myTheme <- theme_classic() + theme(plot.title = element_text(family = "serif", face = "bold",
size = 25), axis.title.x = element_text(family = "serif", size = 20), axis.text.x = element_text(family = "serif",
color = "black", size = 15), axis.title.y = element_text(family = "serif", size = 20),
axis.text.y = element_text(family = "serif", color = "black", size = 15)) + theme(legend.title = element_text(family = "serif",
size = 20, face = "bold"), legend.text = element_text(family = "serif", size = 15))
patternList = list(list(pattern = "horizontal"), list(pattern = "horizontal"),
list(pattern = "horizontal"), list(pattern = "horizontal"))
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
pdac = pdacData[pdacData$location == "PDAC",]
xDiff = ggplot_build(plt)$layout$panel_params[[1]]$x.range # gets x range
yDiff = ggplot_build(plt)$layout$panel_params[[1]]$y.range # gets y range
pdacGrid = countGridPoints(pdac$Xt, pdac$Yt, xDiff, yDiff, n = 360)
pdacGrid[[3]][96, 243]
library(scatterHatch)
library(ggplot2)
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
library(scatterHatch)
library(scatterHatch)
library(ggplot2)
pdacData = scatterHatch::pdacData
pdacData$cellID = paste0('cell_', 1:nrow(pdacData))
pdacData$Yt <- -pdacData$Yt
pancreas_frames = c(1:6, 27:31, 15:19, 40:44)
PDAC_frames = c(23:26, 35:37, 51:52, 64:65, 77)
small_intestines_frames = c(49:50, 63, 75:76, 88:89, 100:103, 112:116, 125:129, 137:140)
annotateLocation <- function(frame){
if (frame %in% pancreas_frames){return("Pancreas")}
if (frame %in% PDAC_frames){return("PDAC")}
if (frame %in% small_intestines_frames){return("Small Intestine")}
return("Other")
}
pdacData$location = sapply(pdacData$frame, annotateLocation)
myTheme <- theme_classic() + theme(plot.title = element_text(family = "serif", face = "bold",
size = 25), axis.title.x = element_text(family = "serif", size = 20), axis.text.x = element_text(family = "serif",
color = "black", size = 15), axis.title.y = element_text(family = "serif", size = 20),
axis.text.y = element_text(family = "serif", color = "black", size = 15)) + theme(legend.title = element_text(family = "serif",
size = 20, face = "bold"), legend.text = element_text(family = "serif", size = 15))
patternList = list(list(pattern = "horizontal"), list(pattern = "horizontal"),
list(pattern = "horizontal"), list(pattern = "horizontal"))
plt <- scatterHatch(data = pdacData, x = pdacData$Xt, y = pdacData$Yt, factor = as.factor(pdacData$location),
factorName = "Tissue Type", pointSize = 1, patternList = patternList) + myTheme
pdac  = pdacData[pdacData$location == "PDAC", ]
pdacGrid = countGridPoints(pdac$Xt, pdac$Yt, c(-142.6875, 21693.0935), c(-16193.0751, 578.6931),360)
pdacGrid[[3]][96, 243]
pdacGrid = countGridPoints(pdac$Xt, pdac$Yt, c(-142.6875, 21693.0935), c(-16193.0751, 578.6931),n = 360)
pdacGrid[[3]][96, 243]
xDiff = ggplot_build(plt)$layout$panel_params[[1]]$x.range # gets x range
yDiff = ggplot_build(plt)$layout$panel_params[[1]]$y.range # gets y range
plt = ggplot(data=data, aes(x=x, y=y))
plt = ggplot(data=pdacData, aes(x=Xt, y=Yt))
xDiff = ggplot_build(plt)$layout$panel_params[[1]]$x.range # gets x range
yDiff = ggplot_build(plt)$layout$panel_params[[1]]$y.range # gets y range
pdacGrid = countGridPoints(pdac$Xt, pdac$Yt, c(-142.6875, 21693.0935), c(-16193.0751, 578.6931),n = 360)
pdacPointsToGrid = pdacGrid[[3]]
freqMat = pdacGrid[[4]]
freqMat = pdacGrid[[3]]
pdacPointsToGrid = pdacGrid[[4]]
View(freqMat)
View(pdacPointsToGrid)
pdacPointsToGrid = sparsityDistanceCalc(pdacPointsToGrid, 1, c(-142.6875, 21693.0935), c(-16193.0751, 578.6931), 'x')
View(pdacPointsToGrid)
2484
248/4
library(scatterHatch)
